"" vundle
"" setup:
""   git clone git://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'vundle'
let g:vundle_default_git_proto = 'git'

"" plugins
Bundle 'thinca/vim-guicolorscheme.git'
Bundle 'grep.vim'
Bundle 'neocomplcache'
Bundle 'Shougo/neosnippet.git'
Bundle 'unite.vim'
Bundle 'hallettj/jslint.vim.git'
Bundle 'quickrun.vim'
Bundle 'Shougo/unite-outline.git'
Bundle 'altercation/vim-colors-solarized.git'
" Bundle 'c.vim'
" Bundle 'git://github.com/Shougo/clang_complete.git'
Bundle 'sudo.vim'
Bundle 'ref.vim'
Bundle 'tsukkee/unite-tag.git'
Bundle 'google.vim'
Bundle 'surround.vim'
" Bundle 'Gundo.vim'
Bundle 'svn-diff.vim'
Bundle 'gtags.vim'
Bundle 'fugitive.vim'
Bundle 'a.vim'
" Bundle 'vimgdb'
Bundle 'Indent-Guides'
Bundle 'YankRing.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'neco-look'
Bundle 'taka84u9/unite-git'
Bundle 'python_fold'
"Bundle 'guicolorscheme.vim'

Bundle 'rdark'
"" rdark.vim modify: 'hi Visual guibg=#000000' to 'hi Visual guibg=#555555'
"Bundle 'basyura/jslint.vim'
Bundle 'thinca/vim-quickrun'
Bundle 'briancollins/vim-jst'
Bundle 'pangloss/vim-javascript'
Bundle 'Solarized'
Bundle 'hier'
Bundle 'quickfixstatus.vim'
Bundle 'Shougo/vimproc.git'
Bundle 'mattn/webapi-vim.git'
Bundle 'mattn/mkdpreview-vim.git'

"" colorscheme {{{
"" Solarized
syntax enable
set t_Co=256
set background=dark
let g:solarized_termcolors=16
"let g:solarized_termcolors=256
let g:solarized_termtrans=1
"highlight LineNr ctermfg=darkyellow " 行番号
"highlight NonText ctermfg=darkgrey
"highlight Folded ctermfg=blue
"highlight SpecialKey cterm=underline ctermfg=darkgrey
"autocmd VimEnter * :GuiColorScheme wombat
"autocmd VimEnter * :GuiColorScheme rdark
colorscheme solarized
"colorscheme railscasts
"colorscheme wombat
"colorscheme rdark
"let g:guicolorscheme_color_table = {'bg' : 'Black', 'fg' : 'Grey'}
" }}}

"" for neocomplcache.vim {{{
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" auto completion setting
let g:neocomplcache_auto_completion_start_length = 1
"" strict popup num
let g:neocomplcache_max_list = 30
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }
" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
" スニペットを展開するためのキー
imap <silent> <C-k> <Plug>(neocomplcache_snippets_expand)
smap <silent> <C-k> <Plug>(neocomplcache_snippets_expand)
" 自分定義の snippet を保存するディレクトリ
let g:neocomplcache_snippets_dir='~/.vim/snippets'
" snippet ファイル編集コマンド
command! -nargs=* Nes NeoComplCacheEditSnippets <args>
" }}}

"" for jslint.vim {{{
function! s:javascript_filetype_settings()
  autocmd BufLeave     <buffer> call jslint#clear()
  autocmd BufWritePost <buffer> call jslint#check()
  autocmd CursorMoved  <buffer> call jslint#message()
endfunction
autocmd FileType javascript call s:javascript_filetype_settings()
" }}}

"" for unite.vim {{{
" 入力モードで開始する
let g:unite_enable_start_insert=1
" keymap
noremap <silent> <C-g> :<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
noremap <silent> <C-t> :<C-u>Unite buffer file_mru git_cached<CR>
noremap <silent> <C-o> :<C-u>Unite outline<CR>
noremap <silent> <C-y> :<C-u>Unite tag<CR>
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
" 初期設定関数を起動する
au FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
  " Overwrite settings.
endfunction
" 様々なショートカット
call unite#set_substitute_pattern('file', '\$\w\+', '\=eval(submatch(0))', 200)
call unite#set_substitute_pattern('file', '^@@', '\=fnamemodify(expand("#"), ":p:h")."/"', 2)
call unite#set_substitute_pattern('file', '^@', '\=getcwd()."/*"', 1)
call unite#set_substitute_pattern('file', '^;r', '\=$VIMRUNTIME."/"')
call unite#set_substitute_pattern('file', '^\~', escape($HOME, '\'), -2)
call unite#set_substitute_pattern('file', '\\\@<! ', '\\ ', -20)
call unite#set_substitute_pattern('file', '\\ \@!', '/', -30)
if has('win32') || has('win64')
  call unite#set_substitute_pattern('file', '^;p', 'C:/Program Files/')
  call unite#set_substitute_pattern('file', '^;v', '~/vimfiles/')
else
  call unite#set_substitute_pattern('file', '^;v', '~/.vim/')
endif
" }}}

"" for ctags {{{
command!
  \ -nargs=? PopupTags
  \ |Unite tag:<args>
function! s:get_func_name(word)
  let end = match(a:word, '<\|[\|(')
  return end == -1 ? a:word : a:word[ : end-1 ]
endfunction
" カーソル下のワードで絞込み
noremap <silent> g<C-]> :<C-u>execute "PopupTags ".expand('<cword>')<CR>
" カーソル下のワードで ( か < か [ が現れるまでで絞込み
noremap <silent> G<C-]> :<C-u>execute "PopupTags "
  \.substitute(<SID>get_func_name(expand('<cWORD>')), '\:', '\\\:', "g")<CR>
" }}}

"" QuickRun
silent! nmap <unique> ,r <Plug>(quickrun)

"" for powerline
let g:Powerline_colorscheme='solarized'
"let g:Powerline_symbols='compatible'

"" for fugitive.vim
nnoremap <Space>gd :<C-u>Gdiff<CR>
nnoremap <Space>gs :<C-u>Gstatus<CR>
